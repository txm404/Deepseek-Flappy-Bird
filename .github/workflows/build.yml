name: Nuitka Build

on:
  push:
    branches: [ "main" ]
  release:
    types: [created]

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsdl2-dev libsdl2-ttf-dev libsdl2-image-dev

    - name: Install Nuitka
      run: pip install nuitka

    - name: Build with Nuitka
      run: |
        python -m nuitka \
          --follow-imports \
          --include-package-data=pygame \
          --standalone \
          --lto=yes \
          --output-dir=build \
          -o flappy-bird \
          main.py

    - name: Package binary
      run: |
        TIMESTAMP=$(date +%Y%m%d%H%M) && \
        mkdir flappy-bird-linux-$TIMESTAMP && \
        cp -r build/main.dist/* flappy-bird-linux-$TIMESTAMP/ && \
        mv flappy-bird-linux-$TIMESTAMP/flappy-bird flappy-bird-linux-$TIMESTAMP/flappy-bird-$TIMESTAMP && \
        chmod +x flappy-bird-linux-$TIMESTAMP/flappy-bird-$TIMESTAMP

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-build
        path: flappy-bird-linux-*

  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        architecture: 'x64'

    - name: Install dependencies
      run: |
        # 安装Windows版SDL2依赖
        choco install -y vcpython27 sdl2 sdl2_ttf sdl2_image
        pip install pygame==2.5.2

    - name: Install Nuitka
      run: pip install nuitka

    - name: Build with Nuitka
      shell: cmd
      run: |
        python -m nuitka ^
        --follow-imports ^
        --include-package-data=pygame ^
        --standalone ^
        --lto=yes ^
        --windows-disable-console ^
        --assume-yes-for-downloads ^
        --output-dir=build ^
        main.py

    - name: Rename executable
      run: |
        ren build\main.dist\main.exe flappy-bird-windows-$(Get-Date -Format "yyyyMMddHHmm").exe

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: |
          build\main.dist\flappy-bird-windows-*.exe
          build\main.dist\

  publish-release:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # 1️⃣ 必须加上这个代码拉取步骤，否则 git 命令无法运行！
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 确保拉取完整历史，否则无法推送 Tag

      # 2. 下载构建的 Linux + Windows 文件
      - name: Download Linux build
        uses: actions/download-artifact@v4
        with:
          name: linux-build
          path: release-artifacts

      - name: Download Windows build
        uses: actions/download-artifact@v4
        with:
          name: windows-build
          path: release-artifacts

      # 3. 压缩构建文件
      - name: Zip Linux build
        run: |
          cd release-artifacts
          find . -name "flappy-bird-linux-*" -type d | xargs -I{} zip -r {}.zip {}

      - name: Zip Windows build
        run: |
          cd release-artifacts
          find . -name "flappy-bird-windows-*.exe" | xargs -I{} zip -j {}.zip {}

      # 4. 如果是在 push 到 main 时触发，自动创建 Git Tag
      - name: Create and push Git tag
        if: "github.event_name == 'push' && github.ref == 'refs/heads/main'"
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          TAG="v$(date +%Y.%m.%d-%H%M)"  # 格式如 v2024.03.12-1530
          git tag $TAG
          git push origin $TAG
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 5. 上传构建文件到 GitHub Release
      - name: Upload to Release
        uses: softprops/action-gh-release@v1
        with:
          files: "release-artifacts/*.zip"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  
