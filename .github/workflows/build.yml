name: Nuitka Build and Release

on:
  push:
    branches: [ "main" ]
  release:
    types: [created]

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libsdl2-dev \
          libsdl2-ttf-dev \
          libsdl2-image-dev \
          libsdl2-mixer-dev

    - name: Install Nuitka
      run: pip install nuitka

    - name: Build with Nuitka
      run: |
        python -m nuitka \
          --standalone \
          --onefile \
          --follow-imports \
          --include-package-data=pygame \
          --lto=yes \
          --output-filename=flappy-bird \
          --output-dir=dist \
          --remove-output \
          main.py

    - name: Package Linux build
      run: |
        TIMESTAMP=$(date +%Y%m%d%H%M)
        mkdir -p release
        if [ -f "dist/flappy-bird" ]; then
          cp "dist/flappy-bird" "release/flappy-bird-linux-$TIMESTAMP"
          chmod +x "release/flappy-bird-linux-$TIMESTAMP"
          cd release && zip "flappy-bird-linux-$TIMESTAMP.zip" "flappy-bird-linux-$TIMESTAMP"
        else
          echo "::error::Linux executable not found!"
          ls -lh dist/
          exit 1
        fi

    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-build
        path: |
          release/flappy-bird-linux-*.zip
          release/flappy-bird-linux-*

  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        architecture: 'x64'

    - name: Install dependencies
      run: |
        choco install -y `
          vcpython27 `
          sdl2 `
          sdl2_ttf `
          sdl2_image `
          sdl2_mixer
        pip install pygame==2.5.2

    - name: Install Nuitka
      run: pip install nuitka

    - name: Build with Nuitka
      shell: cmd
      run: |
        python -m nuitka ^
          --standalone ^
          --onefile ^
          --follow-imports ^
          --include-package-data=pygame ^
          --lto=yes ^
          --windows-disable-console ^
          --assume-yes-for-downloads ^
          --output-dir=dist ^
          --output-filename=flappy-bird ^
          --remove-output ^
          main.py

    - name: Package Windows build
      run: |
        $timestamp = Get-Date -Format "yyyyMMddHHmm"
        mkdir release
        if (Test-Path "dist\flappy-bird.exe") {
          $exePath = "dist\flappy-bird.exe"
        } else {
          Write-Output "::error::Windows executable not found!"
          Get-ChildItem -Path dist
          exit 1
        }
        $newName = "flappy-bird-windows-$timestamp.exe"
        Copy-Item -Path $exePath -Destination "release\$newName"
        Compress-Archive -Path "release\$newName" -DestinationPath "release\$newName.zip"

    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: |
          release/flappy-bird-windows-*.exe
          release/flappy-bird-windows-*.zip

  publish-release:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Prepare release assets
        run: |
          mkdir -p release_files
          find artifacts -name "*.zip" -exec cp {} release_files \;
          ls -lh release_files
      - name: Generate release tag
        id: tag
        run: |
          # 使用符合semver规范的标签格式
          TAG=$(date -u +"v%Y.%m.%d.%H%M")
          echo "TAG_NAME=${TAG}" >> $GITHUB_OUTPUT
          echo "Generated tag: ${TAG}"
      - name: Create and push tag
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag ${{ steps.tag.outputs.TAG_NAME }}
          git push origin ${{ steps.tag.outputs.TAG_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.TAG_NAME }}
          files: |
            release_files/flappy-bird-linux-*.zip
            release_files/flappy-bird-windows-*.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
