name: Nuitka Build

on:
  push:
    branches: [ "main" ]
  release:
    types: [created]

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libsdl2-dev \
          libsdl2-ttf-dev \
          libsdl2-image-dev \
          libsdl2-mixer-dev

    - name: Install Nuitka
      run: pip install nuitka

    - name: Build with Nuitka
      run: |
        python -m nuitka \
          --standalone \
          --onefile \
          --follow-imports \
          --include-package-data=pygame \
          --lto=yes \
          --output-dir=dist \
          --remove-output \
          main.py

    - name: Verify and package binary
      run: |
        TIMESTAMP=$(date +%Y%m%d%H%M)
        mkdir -p flappy-bird-linux-$TIMESTAMP
        
        # 查找生成的可执行文件
        if [ -f "dist/main.dist/main" ]; then
          cp dist/main.dist/main flappy-bird-linux-$TIMESTAMP/flappy-bird-linux-$TIMESTAMP
        elif [ -f "dist/main" ]; then
          cp dist/main flappy-bird-linux-$TIMESTAMP/flappy-bird-linux-$TIMESTAMP
        else
          echo "ERROR: No executable found in dist/"
          ls -R dist/
          exit 1
        fi
        
        chmod +x flappy-bird-linux-$TIMESTAMP/flappy-bird-linux-$TIMESTAMP

        # 验证是否能运行
        ./flappy-bird-linux-$TIMESTAMP/flappy-bird-linux-$TIMESTAMP --version || true

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-build
        path: flappy-bird-linux-*

  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        architecture: 'x64'

    - name: Install dependencies
      run: |
        choco install -y `
          vcpython27 `
          sdl2 `
          sdl2_ttf `
          sdl2_image `
          sdl2_mixer
        pip install pygame==2.5.2

    - name: Install Nuitka
      run: pip install nuitka

    - name: Build with Nuitka
      shell: cmd
      run: |
        python -m nuitka ^
          --standalone ^
          --onefile ^
          --follow-imports ^
          --include-package-data=pygame ^
          --lto=yes ^
          --windows-disable-console ^
          --assume-yes-for-downloads ^
          --output-dir=dist ^
          --remove-output ^
          main.py

    - name: Package Windows build
      run: |
        $timestamp = Get-Date -Format "yyyyMMddHHmm"
        $exeName = "flappy-bird-windows-$timestamp.exe"
        
        if (Test-Path "dist\main.dist\main.exe") {
          Move-Item -Path "dist\main.dist\main.exe" -Destination "dist\$exeName"
        } elseif (Test-Path "dist\main.exe") {
          Move-Item -Path "dist\main.exe" -Destination "dist\$exeName"
        } else {
          Write-Output "ERROR: No executable found in dist/"
          Get-ChildItem -Path dist -Recurse
          exit 1
        }

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: dist\flappy-bird-windows-*.exe

  publish-release:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Linux build
        uses: actions/download-artifact@v4
        with:
          name: linux-build
          path: release-artifacts

      - name: Download Windows build
        uses: actions/download-artifact@v4
        with:
          name: windows-build
          path: release-artifacts

      - name: Prepare release assets
        run: |
          # Linux
          cd release-artifacts
          find . -name "flappy-bird-linux-*" -type d | xargs -I{} zip -r {}.zip {}

          # Windows
          find . -name "flappy-bird-windows-*.exe" -exec zip -j {}.zip {} \;
          ls -lh *.zip

      - name: Create release tag
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          TAG="v$(date +%Y.%m.%d-%H%M)"
          git tag $TAG
          git push origin $TAG
          echo "TAG=$TAG" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG }}
          files: |
            release-artifacts/*.zip
            release-artifacts/*.exe.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
